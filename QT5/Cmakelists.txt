cmake_minimum_required(VERSION 3.12)
cmake_policy(SET CMP0074 NEW)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

project(VolumeFramework)

# without MinSizeRel;RelWithDebInfo.
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")

# Complier
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message(STATUS "compiler is gcc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    message(STATUS "compiler is msvc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    message(STATUS "compiler is AppleClang")
    # set QT directory
    set(Qt5Core_DIR .../qt/5.14.2/clang_64/lib/cmake/Qt5Core)
    set(Qt5Gui_DIR .../qt/5.14.2/clang_64/lib/cmake/Qt5Gui)
    set(Qt5OpenGL_DIR .../qt/5.14.2/clang_64/lib/cmake/Qt5OpenGL)
    set(Qt5Widgets_DIR .../qt/5.14.2/clang_64/lib/cmake/Qt5Widgets)
    find_package(OpenGL REQUIRED)
    include_directories(${OPENGL_INCLUDE_DIR})
    find_package(GLUT REQUIRED)
    include_directories(${GLUT_INCLUDE_DIR})
endif()

# Add third party libraries
set(EIGEN3_INCLUDE_DIR ThirdPartyLib/eigen-3.4.0)
add_subdirectory(ThirdPartyLib/OpenMesh-8.1)
add_subdirectory(ThirdPartyLib/OpenVolumeMesh)
add_subdirectory(ThirdPartyLib/ANN)

# QT
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
find_package(Qt5 COMPONENTS Core Gui OpenGL Widgets REQUIRED)
get_target_property(_qmake_executable Qt5::qmake IMPORTED_LOCATION)
get_filename_component(_qt_bin_dir "${_qmake_executable}" DIRECTORY)
find_program(DEPLOYQT_EXECUTABLE NAMES windeployqt macdeployqt HINTS "${_qt_bin_dir}")

set(QRC_SOURCE_FILES VolumeMeshProcessing/Resources/volumemeshprocessing_base.qrc)
qt5_add_resources(QRC_FILES ${QRC_SOURCE_FILES})

file (GLOB GUI_FILE
    VolumeMeshProcessing/GUI/*.h
    VolumeMeshProcessing/GUI/*.cpp
)

file (GLOB MeshViewer_FILE
    VolumeMeshProcessing/VolumeMeshViewer/*.h
    VolumeMeshProcessing/VolumeMeshViewer/*.cpp
)

add_executable(${PROJECT_NAME}
    ${GUI_FILE}
    ${MeshViewer_FILE}
    ${QRC_FILES}
    VolumeMeshProcessing/main.cpp
)

if(WIN32)
add_custom_command(TARGET ${PROJECT_NAME}
POST_BUILD
COMMAND ${DEPLOYQT_EXECUTABLE} "$<TARGET_FILE:${PROJECT_NAME}>"
    --$<LOWER_CASE:$<CONFIG>> --qmldir ${CMAKE_SOURCE_DIR}
)
endif()

target_link_libraries(${PROJECT_NAME} PUBLIC
    Qt5::Widgets Qt5::Core Qt5::Gui Qt5::OpenGL
    ANN_lib
    OpenVolumeMesh
    OpenMeshCore
    OpenMeshTools
)
target_include_directories(${PROJECT_NAME} PUBLIC
    ${EIGEN3_INCLUDE_DIR}
    VolumeMeshProcessing
)
target_compile_definitions(${PROJECT_NAME} PRIVATE _USE_MATH_DEFINES _CRT_SECURE_NO_WARNINGS)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    target_compile_options(${PROJECT_NAME} PRIVATE /wd"4819" /bigobj)
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
target_link_libraries(${PROJECT_NAME} PUBLIC
    opengl32
    glu32   
)
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    target_link_libraries(${PROJECT_NAME} PUBLIC
    ${GLUT_LIBRARY} 
    ${OPENGL_LIBRARY}
)
endif()
